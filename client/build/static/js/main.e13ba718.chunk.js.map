{"version":3,"sources":["utils/queries.js","utils/mutations.js","utils/auth.js","utils/localStorage.js","pages/SearchBooks.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["GET_ME","gql","LOGIN_USER","ADD_USER","REMOVE_BOOK","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","SavedBooks","useQuery","loading","data","useMutation","deleteBook","userData","me","username","handleDeleteBook","a","Auth","loggedIn","variables","update","cache","readQuery","query","updatedBookCache","savedBooks","book","writeQuery","console","error","Jumbotron","fluid","className","Container","length","CardColumns","map","Card","key","border","image","Img","src","alt","title","variant","Body","Title","authors","link","Text","href","target","rel","description","Button","onClick","SignupForm","useState","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","createUser","handleInputChange","event","name","value","handleFormSubmit","preventDefault","currentTarget","checkValidity","stopPropagation","login","addUser","Form","noValidate","onSubmit","Alert","dismissible","onClose","show","Group","Label","htmlFor","Control","type","placeholder","onChange","required","Feedback","disabled","LoginForm","loginUser","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","id","Nav","logout","Modal","size","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","client","ApolloClient","request","operation","setContext","headers","authorization","uri","App","ApolloProvider","exact","path","component","SearchBooks","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e13ba718.chunk.js","sourcesContent":["// This will hold the query GET_ME, which will execute the me query set up using Apollo Server.\r\n\r\nimport gql from \"graphql-tag\";\r\n\r\nexport const GET_ME = gql`\r\n  {\r\n    me {\r\n      _id\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        bookId\r\n        authors\r\n        description\r\n        title\r\n        image\r\n        link\r\n      }\r\n    }\r\n  }\r\n`;","import gql from \"graphql-tag\";\r\n\r\n// LOGIN_USER will execute the loginUser mutation set up using Apollo Server.\r\nexport const LOGIN_USER = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n// ADD_USER will execute the addUser mutation.\r\nexport const ADD_USER = gql`\r\n  mutation addUser($username: String!, $email: String!, $password: String!) {\r\n    addUser(username: $username, email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n// SAVE_BOOK will execute the saveBook mutation.\r\nexport const SAVE_BOOK = gql`\r\n  mutation saveBook($book: SavedBookInput!) {\r\n    saveBook(book: $book) {\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        authors\r\n        description\r\n        bookId\r\n        image\r\n        link\r\n        title\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n// REMOVE_BOOK will execute the removeBook mutation.\r\nexport const REMOVE_BOOK = gql`\r\n  mutation removeBook($bookId: String!) {\r\n    removeBook(bookId: $bookId) {\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        authors\r\n        description\r\n        bookId\r\n        image\r\n        link\r\n        title\r\n      }\r\n    }\r\n  }\r\n`;","// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","// Use the Apollo useMutation() Hook to execute the SAVE_BOOK mutation in the handleSaveBook() function instead of the saveBook() function imported from the API file.\n// Make sure you keep the logic for saving the book's ID to state in the try...catch block!\n\nimport React from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\n\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { GET_ME } from '../utils/queries';\nimport { REMOVE_BOOK } from '../utils/mutations';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\n\nconst SavedBooks = () => {\n  const { loading, data } = useQuery(GET_ME);\n  const [deleteBook] = useMutation(REMOVE_BOOK);\n  const userData = data?.me || {};\n\n  if (!userData?.username) {\n    return (\n      <h4>\n        You need to be logged in to see this page. Use the navigation links above to sign up or log in!\n      </h4>\n    );\n  }\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      await deleteBook({\n        variables: { bookId: bookId },\n        update: cache => {\n          const data = cache.readQuery({ query: GET_ME });\n          const userDataCache = data.me;\n          const savedBooksCache = userDataCache.savedBooks;\n          const updatedBookCache = savedBooksCache.filter((book) => book.bookId !== bookId);\n          data.me.savedBooks = updatedBookCache;\n          cache.writeQuery({ query: GET_ME, data: { data: { ...data.me.savedBooks } } })\n        }\n      });\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  // if data isn't here yet, say so\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  {book.link ? <Card.Text><a href={book.link} target=\"_blank\" rel=\"noreferrer noopener\" >More Information on Google Books</a></Card.Text> : null}\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","// Remove the useEffect() Hook that sets the state for UserData.\n// Instead, use the useQuery() Hook to execute the GET_ME query on load and save it to a variable named userData.\n// Use the useMutation() Hook to execute the REMOVE_BOOK mutation in the handleDeleteBook() function instead of the deleteBook() function that's imported from API file. (Make sure you keep the removeBookId() function in place!)\n\nimport React from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\n\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { GET_ME } from '../utils/queries';\nimport { REMOVE_BOOK } from '../utils/mutations';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\n\nconst SavedBooks = () => {\n  const { loading, data } = useQuery(GET_ME);\n  const [deleteBook] = useMutation(REMOVE_BOOK);\n  const userData = data?.me || {};\n\n  if (!userData?.username) {\n    return (\n      <h4>\n        You need to be logged in to see this page. Use the navigation links above to sign up or log in!\n      </h4>\n    );\n  }\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      await deleteBook({\n        variables: { bookId: bookId },\n        update: cache => {\n          const data = cache.readQuery({ query: GET_ME });\n          const userDataCache = data.me;\n          const savedBooksCache = userDataCache.savedBooks;\n          const updatedBookCache = savedBooksCache.filter((book) => book.bookId !== bookId);\n          data.me.savedBooks = updatedBookCache;\n          cache.writeQuery({ query: GET_ME, data: { data: { ...data.me.savedBooks } } })\n        }\n      });\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  // if data isn't here yet, say so\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  {book.link ? <Card.Text><a href={book.link} target=\"_blank\" rel=\"noreferrer noopener\">More Information on Google Books</a></Card.Text> : null}\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ADD_USER } from '../utils/mutations';\n\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n  // define mutation for adding a user\n  const [createUser] = useMutation(ADD_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await createUser({\n        variables: { ...userFormData }\n      });\n\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;","// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\nimport { useMutation } from '@apollo/react-hooks';\nimport { LOGIN_USER } from '../utils/mutations';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [loginUser] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await loginUser({\n        variables: { ...userFormData }\n      });\n\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost'\nimport SearchBooks from './pages/SearchBooks';\nimport SavedBooks from './pages/SavedBooks';\nimport Navbar from './components/Navbar';\n\n\nconst client = new ApolloClient({\n  request: (operation) => {\n    const token = localStorage.getItem(\"id_token\");\n\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : \"\",\n      },\n    });\n  },\n  uri: \"/graphql\",\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Navbar />\n          <Switch>\n            <Route exact path='/' component={SearchBooks} />\n            <Route exact path='/saved' component={SavedBooks} />\n            <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n          </Switch>\n        </>\n      </Router>\n    </ApolloProvider>\n\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}